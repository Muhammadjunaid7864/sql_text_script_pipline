# This is a basic workflow to help you get started with Actions

name: Sql Script
run-name: Sql Script paractice by ${{github.actor}}

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: "create file"
        run: |
          echo "BEGIN TRAN
          WAITFOR DELAY '00:00:10'
          UPDATE Students SET FirstName = 'Nasir' WHERE StudentID = 1;
          UPDATE teacher SET FirstName = 'Nasir' WHERE teacherID = 1;
          GO">deadlock.sql
      - name: "read file"
        run: |
          cat deadlock.sql
      
      - name: "check deadlock"
        run: |
          sqlcmd -S database-1.cqsvhj4w2dhq.us-west-2.rds.amazonaws.com,1433 -U admin -P developer7864 -d Mydb -b -j -Q "SELECT * FROM sys.dm_tran_locks WHERE resource_type = 'OBJECT'"          
      - name: "Script run"
        run: |
          retry=5
          success=false
          while [ $retry -gt 0 ] && [ "$success" != true ]; do
            output=$(sqlcmd -S database-1.cqsvhj4w2dhq.us-west-2.rds.amazonaws.com,1433 -U admin -P developer7864 -d Mydb -b -j -i deadlock.sql)
            
            # Check if the output contains a deadlock error
            if echo "$output" | grep -q "deadlock_error"; then
              echo "Deadlock error detected. Retrying..."
              ((retry--))
              sleep 10  # Adjust as needed - wait before retry
            else
              success=true
            fi
          done
  build1: 
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: "create file"
        run: |
          echo "BEGIN TRAN;
          UPDATE teacher SET FirstName = 'Nasir' WHERE teacherID = 1;
          WAITFOR DELAY '00:00:20'
          UPDATE Students SET FirstName = 'Nasir' WHERE StudentID = 1;
          GO">deadlock1.sql
      - name: "read file"
        run: |
          cat deadlock1.sql
      
      - name: "Script run"
        run: |
          retry=5
          success=false
          while [ $retry -gt 0 ] && [ "$success" != true ]; do
            output=$(sqlcmd -S database-1.cqsvhj4w2dhq.us-west-2.rds.amazonaws.com,1433 -U admin -P developer7864 -d Mydb -b -j -i deadlock1.sql)
            
            # Check if the output contains a deadlock error
            if echo "$output" | grep -q "deadlock_error"; then
              echo "Deadlock error detected. Retrying..."
              ((retry--))
              sleep 10  # Adjust as needed - wait before retry
            else
              success=true
            fi
          done
      - name: "check deadlock"
        run: |

          sqlcmd -S database-1.cqsvhj4w2dhq.us-west-2.rds.amazonaws.com,1433 -U admin -P developer7864 -d Mydb -b -j -Q "SELECT * FROM sys.dm_tran_locks WHERE resource_type = 'OBJECT'"
  checkupdate:
    runs-on: ubuntu-latest

    steps:
      - name: "create file"
        run: |
          echo "BEGIN TRAN
          UPDATE teacher SET FirstName = 'Nasir' WHERE teacherID = 1;
          UPDATE Students SET FirstName = 'Nasir' WHERE StudentID = 1;
          GO">mysql.sql

      - name: Check SQL Update Query
        run: |
          retry=5
          success=false
          while [ $retry -gt 0 ] && [ "$success" != true ]; do
            output=$(sqlcmd -S database-1.cqsvhj4w2dhq.us-west-2.rds.amazonaws.com,1433 -U admin -P developer7864 -d Mydb -b -j -i mysql.sql)
            echo "$output"
            # Check if the output contains a deadlock error
            if echo "$output" | grep -q "deadlock_error"; then
              echo "Deadlock error detected. Retrying..."
              ((retry--))
              sleep 10  # Adjust as needed - wait before retry
            else
              success=true
            fi
          done